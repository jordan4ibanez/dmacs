
import gdk.display;
import gdk.monitor;
import gdk.rectangle;
import gio.action;
import gio.action_group;
import gio.application;
import gio.application_command_line;
import gio.list_model;
import gio.menu_model;
import gio.simple_action;
import gio.types;
import glib.global;
import glib.types;
import glib.variant;
import gobject.object;
import gobject.param_spec;
import gtk.about_dialog;
import gtk.application;
import gtk.application_window;
import gtk.builder;
import gtk.frame;
import gtk.label;
import gtk.paned;
import gtk.scrolled_window;
import gtk.signal_action;
import gtk.text_buffer;
import gtk.text_view;
import gtk.types;
import gtk.window;
import std.stdio;




/// This is the master program.
/// If you want to do anything in Dmacs, this is what you want to talk to.
static final const class Dmacs {
static:
private:

    

    Display __masterDisplay;
    MonitorWrap __masterMonitor;

    

    /// The GTK4 app which Dmacs controls.
    gtk.application.Application app;

    /// In Emacs terminology, a "frame" is what most window managers (Windows, OSX, GNOME, KDE, etc.) would call a "window".
    ApplicationWindow masterFrame;

    /// This is so you can start iterating into the widgets and not have to start at the master frame.
    Module masterModule;

    

protected:

    void __initialize(string[] args) {
        app = new gtk.application.Application("org.dmacs", ApplicationFlags.DefaultFlags);

        app.connectStartup(&onStartup);
        app.connectActivate(&onActivate);

        

        timeoutAdd(PRIORITY_DEFAULT, 100, () {
            

            return SOURCE_CONTINUE;
        });

        app.run();
    }

    

    void onStartup() {
        writeln("Welcome to Dmacs.");

        // todo: set up base hooks.

        createBuffer("*scratch*");
    }

    void onActivate() {

        if (masterFrame is null) {
            masterFrame = new ApplicationWindow(app);
            __masterDisplay = masterFrame.getDisplay();
        }
        masterFrame.setTitle("*nothing*" ~ __masterFrameSuffix);
        { // Set the window up.
            // gtk4 has no concept of a primary monitor.
            // No concept of centering a window.
            // So:
            // Whatever display your mouse is hovering over is where this will open.
            // It will be wherever it wants.
            gio.list_model.ListModel blah = __masterDisplay.getMonitors();
            if (blah.getNItems == 0) {
                throw new Error("Can't do headless mode.");
            }
            MonitorWrap m = cast(MonitorWrap) blah.getItem(0);
            gdk.rectangle.Rectangle size;
            m.getGeometry(size);
            masterFrame.setDefaultSize(size.width / 2, size.height / 2);
        }

        { // Create the master module.
            masterModule = new Module;
        }

        masterFrame.present();
        writeln("Activation complete.");

        afterActivate();
    }

    void afterActivate() {
        masterModule.splitRight(new Module);

        masterModule.child.splitRight(new Module, Orientation.Vertical);
        masterModule.child.child.splitRight(new Module, Orientation.Vertical);
        masterModule.child.child.child.splitRight(new Module, Orientation.Horizontal);
        masterModule.child.child.child.child.splitRight(new Module, Orientation.Horizontal);
        masterModule.child.child.child.child.child.splitRight(new Module, Orientation.Vertical);
    }



public:

  



}

void main(string[] args) {
    Dmacs.__initialize(args);
}
