import std.stdio;

import gdk.Display;
import gdk.Event;
import gdk.MonitorG;
import gdk.Rectangle;
import gio.Application : GioApplication = Application;
import gtk.Application;
import gtk.ApplicationWindow;
import gtk.Container;
import gtk.Frame;
import gtk.Grid;
import gtk.Label;
import gtk.Paned;
import gtk.ScrolledWindow;
import gtk.TextBuffer;
import gtk.TextTagTable;
import gtk.TextView;
import gtk.TreeView;
import gtk.VBox;
import gtk.Widget;

/// Check if an object is an instance of a class.
pragma(inline, true)
T instanceof(T)(Object o) if (is(T == class)) {
    return cast(T) o;
}

static final const class Dmacs {
static:
private:

    

    // These are modular components of Dmacs.
    string __masterFrameSuffix = " - Dmacs";

    // These are global variables for the state of Dmacs.
    Container focusedNode;

    // In Emacs terminology, a "frame" is what most window managers (Windows, OSX, GNOME, KDE, etc.) would call a "window".
    ApplicationWindow masterFrame;

    // This is a linked list and gets so complex I can't really explain it.
    // But, it holds 2 major components:
    // ScrollWindow -> TextView (window)
    // split window (Paned)
    Container masterNode;

    // When you use [C-x C-f] to invoke command find-file, Emacs opens the file you request, and puts its contents into a buffer with the same name as the file.
    // Instead of thinking that you are editing a file, think that you are editing text in a buffer. When you save the buffer, the file is updated to reflect your edits. 
    TextBuffer[string] buffers;
    string[TextBuffer] bufferNameLookup;

protected:

    void initialize(Application application) {
        masterFrame = new ApplicationWindow(application);
        
        
        masterFrame.setTitle("*nothing*" ~ __masterFrameSuffix);



        { // Create the scratch pad buffer with a default view. This is the buffer that should never be deleted.

            TextBuffer scratch = createBuffer("*scratch*");
            scratch.setText("this is a scratch pad");

            ScrolledWindow window = createWindow("*scratch*");

            masterNode = window;
            focusedNode = masterNode;
            masterFrame.add(masterNode);

        }

        masterFrame.addOnKeyPress((Event e, Widget w) {

            writeln("hi");

            return false;
        });

        if (true) { // Split the existing node horizontally.
            if (ScrolledWindow thisNode = instanceof!ScrolledWindow(focusedNode)) {

                Widget oldParent = thisNode.getParent();

                // First pop this off GTK.
                if (ApplicationWindow win = instanceof!ApplicationWindow(oldParent)) {
                    win.remove(thisNode);
                } else {
                    throw new Error("Not programmed yet");
                }

                // Attempt to get the text buffer.
                TextBuffer thisBuffer = (cast(TextView) thisNode.getChild()).getBuffer();
                if (thisBuffer is null) {
                    throw new Error("This buffer is null. How did something get a null buffer?");
                }

                // Now attempt to get the buffer's ID.
                string bufferID = bufferNameLookup[thisBuffer];
                if (bufferID.length == 0) {
                    throw new Error("This buffer id is null. How.");
                }

                // todo: Allow creating a new buffer if not exists.
                // fixme: for now, duplicate the current buffer.
                ScrolledWindow newWindow = createWindow(bufferID);

                // Create a new Paned instance and plop a new window into it.
                Paned splitView = new Paned(GtkOrientation.HORIZONTAL);
                splitView.add(thisNode, newWindow);
                splitView.checkResize();

                // First pop this off GTK.
                if (ApplicationWindow win = instanceof!ApplicationWindow(oldParent)) {
                    win.add(splitView);
                    int x, y;
                    splitView.getSizeRequest(x, y);
                    writeln(x, y);

                } else {
                    throw new Error("Not programmed yet");
                }

            } else {
                throw new Error("How did this even get reached?");
            }
        }

        // Paned workArea = new Paned(GtkOrientation.HORIZONTAL);
        // workArea.setBorderWidth(4);
        // masterWindow.add(workArea);

        // {

        //     workArea.add(scrollContainer, null);

        //     TextView view = new TextView();
        //     TextBuffer buf = view.getBuffer();
        //     buf.setText("hi");
        //     scrollContainer.add(view);
        // }

        // {
        //     ScrolledWindow scrollContainer = new ScrolledWindow();
        //     scrollContainer.setBorderWidth(4);
        //     scrollContainer.setHexpand(true);
        //     scrollContainer.setVexpand(true);
        //     workArea.add(scrollContainer);

        //     TextView view = new TextView();
        //     TextBuffer buf = view.getBuffer();
        //     buf.setText("hi");
        //     scrollContainer.add(view);
        // }

        // TextView view2 = new TextView();
        // TextBuffer buf2 = view2.getBuffer();
        // buf2.setText("bye");
        // window.add(view2);

        // buf.insert("hi");

        // window.add(window);

        // window.add(new VBox(false, 0));

        // masterWindow.add(view);

        masterFrame.showAll();
    }

public:

    void newWindow(string buffer) {

    }

    /// Create a new window into a buffer.
    /// If this buffer does not exist, it will warn you and select
    /// the scratch pad.
    /// This will return the container that holds the view into the buffer.
    ScrolledWindow createWindow(string buffer) {
        string temp = buffer;
        if (temp !in buffers) {
            temp = "*scratch*";
        }

        TextView newWindow = new TextView(buffers[temp]);

        ScrolledWindow scrollContainer = new ScrolledWindow();
        scrollContainer.setBorderWidth(4);
        scrollContainer.setHexpand(true);
        scrollContainer.setVexpand(true);
        scrollContainer.add(newWindow);

        scrollContainer.setResizeMode(GtkResizeMode.PARENT);

        Paned splitView = new Paned(GtkOrientation.HORIZONTAL);

        return scrollContainer;
    }

}

int main(string[] args) {
    Application application = new Application("org.dmacs", GApplicationFlags.FLAGS_NONE);

    application.addOnActivate(delegate void(GioApplication app) {
        Dmacs.initialize(application);
    });

    return application.run(args);
}
